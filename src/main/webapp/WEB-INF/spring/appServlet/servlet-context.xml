<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
<!-- ** Namespaces 안뜰때 
	=> 강제로 xmlns: 값을 넣어줄 수 있다. (예 -> xmlns:mybatis-spring="http://myba... 
	=> 단, 이때는 xsi:schemaLocation=... 에도 해당하는 url 값을 추가 해야한다. 	
-->
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.fallindog.fid, service, util" />
	
   <!-- *** jsonView 설정 
   		1) BeanNameViewResolver
   		2) jsonView 설정-->
   <beans:bean id="viewResolver" 
         class="org.springframework.web.servlet.view.BeanNameViewResolver">
      <beans:property name="order" value="1" />
   </beans:bean>
   <beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView" /> 	

<!-- ** BeanNameViewResolver
   => id 에 해당하는 Bean이 View 를 처리하도록 해주는 ViewResolver 
      컨트롤러에서  mv.setViewName("downloadView") 하게되면  
      일반적인 경우 InternalResourceViewResolver 에 의해  views/downloadView.jsp 를 찾음,
      그러나  jsp 가 아닌 형태의  response 를 처리하는 경우에는 한 이 경우에는 "downloadView" 와
      동일한  id 로 생성된 Bean 을 찾아 response 를 처리함
   => 그래서   ViewResolver 들 간의 우선순위가 팔요함 ( 아래  property order 참고 ) 
   => 사용예 : "jsonView" , ImageDownLoad 의 "downloadView" 

   ** property order 
    => 두개이상 존재하는 viewResolver 를 위해서 우선순위를 매기는 것.
            우선순위를 명시 하지 않으면 "가장 낮은 우선순위를 갖게 된다."
            우선순위는 "0"이 가장 먼저 실행되고, 이후로 매겨지는 순서에 따라 실행된다.
    => 그  다음 viewResolver가 실행 기준은 "null" 이 반환되느냐 가 기준이다. 
            그래서 null 값이 있을수 없는 InternalResourceViewResolver 가 우선순위가 높게 되면,
            다른 viewResolver는 사용되지 않기 때문에 (항상 뷰 이름에 매핑되는 뷰 객체를 리턴하기 때문)
     InternalResourceViewResolver 는 우선순위가 가장 낮아야 한다. 
-->

   <!-- ** Image DownLoad 
       => 다운로드를 처리할 ViewResolver 클래스 등록  ( Java Code 작성 )
         => id="downloadView" 와  컨트롤러의 매핑메서드에서 리턴된 view name 과 같아야 한다.     -->
   <!-- <beans:bean id="downloadView" class="downTest.DownloadView" /> -->
  
	
   <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
       ** Image Upload : MultipartResolver 설정 -->
   <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
      <beans:property name="maxUploadSize" value="-1" />
   </beans:bean>
   <!-- 
      => id , name 변경 불가능 
         : 대부분의 Resolver로 끝나는 클래스의 경우에는 이미 정해져있기 때문에 변경불가능.
      => maxUploadSize 는 지정하지 않으면 default 값은 -1 이며 크기 무제한이 됨. 
         다양하게 변경하며 Test  
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  -->	
	
	
   <!-- Mybatis 설정 : interface 방식 *****************************************  
      => DAO 에서의 sql 구문을 xml (Mapper) 로 처리
      => DB_Connection, Mybatis 설정
      
      1) DB_Connection  -->
	<beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
		<beans:property name="driverClassName" value="com.mysql.cj.jdbc.Driver" />
		<beans:property name="url" value="jdbc:mysql://localhost:3306/mydb?useSSL=false&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=true" />
		<beans:property name="username" value="root" />
		<beans:property name="password" value="0607"></beans:property>
	</beans:bean>
	
	<!-- 2) Mybatis 설정 
      => SqlSessionFactory 
         - MyBatis 와 연동시 DB 연결과 SQL 실행의 핵심 클래스
         - SqlSessionFactoryBean 에 의해 생성됨  
      => base-package 등록 : DAO 필요 없이 interface ~Mapper.java 사용을 위한 경로 맞춰주는 설정 -->
      
	    <beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
      	<beans:property name="dataSource" ref="dataSource" />
      	
      <!-- 
      <beans:property name="mapperLocations" value="classpath:/mappers/**/*Mapper.xml" />
      => interface 방식으로 적용하면 필요없음 -->
	</beans:bean>
	
	<mybatis-spring:scan base-package="mapperInterface"/>
</beans:beans>
